import type { ShopifyApiProjectOptions } from "./types";
export declare const shopifyApiProject: ({ apiType, apiVersion, outputDir, documents, module, }: ShopifyApiProjectOptions) => {
    schema: string;
    documents: string[];
    extensions: {
        codegen: {
            pluckConfig: {
                isGqlTemplateLiteral: (node: any, options: any) => boolean;
                pluckStringFromFile: (code: string, { start, end, leadingComments }: any) => string;
            };
            generates: {
                [x: string]: {
                    schema: string;
                    plugins: string[];
                    config: {
                        minify: boolean;
                    };
                    preset?: undefined;
                    documents?: undefined;
                    presetConfig?: undefined;
                } | {
                    schema: string;
                    plugins: string[];
                    config?: undefined;
                    preset?: undefined;
                    documents?: undefined;
                    presetConfig?: undefined;
                } | {
                    schema: string;
                    preset: import("@graphql-codegen/plugin-helpers").Types.OutputPreset<import("./types").ShopifyApiPresetConfig>;
                    documents: string[];
                    presetConfig: {
                        apiType: import("./types").ApiType;
                        module: string | undefined;
                    };
                    plugins?: undefined;
                    config?: undefined;
                };
            };
        };
    };
};
//# sourceMappingURL=api-project.d.ts.map