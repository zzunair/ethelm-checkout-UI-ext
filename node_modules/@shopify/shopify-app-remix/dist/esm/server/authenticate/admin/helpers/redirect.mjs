import { redirect } from '@remix-run/server-runtime';
import { getSessionTokenHeader } from '../../helpers/get-session-token-header.mjs';
import { renderAppBridge } from './render-app-bridge.mjs';
import { redirectWithAppBridgeHeaders } from './redirect-with-app-bridge-headers.mjs';

function redirectFactory(params, request) {
    const { config } = params;
    return function redirect$1(url, init) {
        const { searchParams } = new URL(request.url);
        const parsedUrl = new URL(url, config.appUrl);
        const isSameOrigin = parsedUrl.origin === config.appUrl;
        if (isSameOrigin || url.startsWith('/')) {
            searchParams.forEach((value, key) => {
                if (!parsedUrl.searchParams.has(key)) {
                    parsedUrl.searchParams.set(key, value);
                }
            });
        }
        const target = (typeof init !== 'number' && init?.target) || '_self';
        if (target === '_self') {
            if (isBounceRequest(request)) {
                throw renderAppBridge(params, request, {
                    url: parsedUrl.toString(),
                    target,
                });
            }
            else {
                return redirect(parsedUrl.toString(), init);
            }
        }
        else if (isDataRequest(request)) {
            throw redirectWithAppBridgeHeaders(parsedUrl.toString());
        }
        else if (isEmbeddedRequest(request)) {
            throw renderAppBridge(params, request, {
                url: parsedUrl.toString(),
                target,
            });
        }
        return redirect(url, init);
    };
}
function isBounceRequest(request) {
    return (Boolean(getSessionTokenHeader(request)) &&
        request.headers.has('X-Shopify-Bounce'));
}
function isDataRequest(request) {
    const isGet = request.method === 'GET';
    const sessionTokenHeader = Boolean(getSessionTokenHeader(request));
    return (sessionTokenHeader &&
        !isBounceRequest(request) &&
        (!isEmbeddedRequest(request) || !isGet));
}
function isEmbeddedRequest(request) {
    const { searchParams } = new URL(request.url);
    return searchParams.get('embedded') === '1';
}

export { redirectFactory };
//# sourceMappingURL=redirect.mjs.map
