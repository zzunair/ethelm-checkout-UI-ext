import { Base } from '../../base.mjs';
import { ApiVersion } from '../../../lib/types.mjs';
import { Currency } from './currency.mjs';

/***********************************************************************************************************************
* This file is auto-generated. If you have an issue, please create a GitHub issue.                                     *
***********************************************************************************************************************/
class ApplicationCharge extends Base {
    static async find({ session, id, fields = null }) {
        const result = await this.baseFind({
            session: session,
            requireIds: true,
            urlIds: { "id": id },
            params: { "fields": fields },
        });
        return result.data ? result.data[0] : null;
    }
    static async all({ session, since_id = null, fields = null, ...otherArgs }) {
        const response = await this.baseFind({
            session: session,
            urlIds: {},
            params: { "since_id": since_id, "fields": fields, ...otherArgs },
        });
        return response;
    }
}
ApplicationCharge.apiVersion = ApiVersion.April24;
ApplicationCharge.hasOne = {
    "currency": Currency
};
ApplicationCharge.hasMany = {};
ApplicationCharge.paths = [
    { "http_method": "get", "operation": "get", "ids": [], "path": "application_charges.json" },
    { "http_method": "get", "operation": "get", "ids": ["id"], "path": "application_charges/<id>.json" },
    { "http_method": "post", "operation": "post", "ids": [], "path": "application_charges.json" }
];
ApplicationCharge.resourceNames = [
    {
        "singular": "application_charge",
        "plural": "application_charges"
    }
];

export { ApplicationCharge };
//# sourceMappingURL=application_charge.mjs.map
