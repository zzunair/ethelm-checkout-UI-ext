'use strict';

var shopifyApi = require('@shopify/shopify-api');
var client = require('@prisma/client');

const UNIQUE_KEY_CONSTRAINT_ERROR_CODE = 'P2002';
class PrismaSessionStorage {
    constructor(prisma, { tableName } = {}) {
        this.prisma = prisma;
        this.tableName = 'session';
        if (tableName) {
            this.tableName = tableName;
        }
        if (this.getSessionTable() === undefined) {
            throw new Error(`PrismaClient does not have a ${this.tableName} table`);
        }
        this.ready = this.getSessionTable()
            .count()
            .catch((cause) => {
            throw new MissingSessionTableError(`Prisma ${this.tableName} table does not exist. This could happen for a few reasons, see https://github.com/Shopify/shopify-app-js/tree/main/packages/apps/session-storage/shopify-app-session-storage-prisma#troubleshooting for more information`, cause);
        });
    }
    async storeSession(session) {
        await this.ready;
        const data = this.sessionToRow(session);
        try {
            await this.getSessionTable().upsert({
                where: { id: session.id },
                update: data,
                create: data,
            });
        }
        catch (error) {
            if (error instanceof client.Prisma.PrismaClientKnownRequestError &&
                error.code === UNIQUE_KEY_CONSTRAINT_ERROR_CODE) {
                console.log('Caught PrismaClientKnownRequestError P2002 - Unique Key Key Constraint, retrying upsert.');
                await this.getSessionTable().upsert({
                    where: { id: session.id },
                    update: data,
                    create: data,
                });
                return true;
            }
            throw error;
        }
        return true;
    }
    async loadSession(id) {
        await this.ready;
        const row = await this.getSessionTable().findUnique({
            where: { id },
        });
        if (!row) {
            return undefined;
        }
        return this.rowToSession(row);
    }
    async deleteSession(id) {
        await this.ready;
        try {
            await this.getSessionTable().delete({ where: { id } });
        }
        catch {
            return true;
        }
        return true;
    }
    async deleteSessions(ids) {
        await this.ready;
        await this.getSessionTable().deleteMany({ where: { id: { in: ids } } });
        return true;
    }
    async findSessionsByShop(shop) {
        await this.ready;
        const sessions = await this.getSessionTable().findMany({
            where: { shop },
            take: 25,
            orderBy: [{ expires: 'desc' }],
        });
        return sessions.map((session) => this.rowToSession(session));
    }
    sessionToRow(session) {
        const sessionParams = session.toObject();
        return {
            id: session.id,
            shop: session.shop,
            state: session.state,
            isOnline: session.isOnline,
            scope: session.scope || null,
            expires: session.expires || null,
            accessToken: session.accessToken || '',
            userId: sessionParams.onlineAccessInfo?.associated_user
                .id || null,
        };
    }
    rowToSession(row) {
        const sessionParams = {
            id: row.id,
            shop: row.shop,
            state: row.state,
            isOnline: row.isOnline,
        };
        if (row.expires) {
            sessionParams.expires = row.expires.getTime();
        }
        if (row.scope) {
            sessionParams.scope = row.scope;
        }
        if (row.accessToken) {
            sessionParams.accessToken = row.accessToken;
        }
        if (row.userId) {
            sessionParams.onlineAccessInfo = String(row.userId);
        }
        return shopifyApi.Session.fromPropertyArray(Object.entries(sessionParams));
    }
    getSessionTable() {
        return this.prisma[this.tableName];
    }
}
class MissingSessionTableError extends Error {
    constructor(message, cause) {
        super(message);
        this.cause = cause;
    }
}

exports.MissingSessionTableError = MissingSessionTableError;
exports.PrismaSessionStorage = PrismaSessionStorage;
//# sourceMappingURL=prisma.js.map
